package br.com.Gabriel.service.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.List;
import java.util.Optional;


import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.modelmapper.ModelMapper;

import br.com.Gabriel.domain.User;
import br.com.Gabriel.domain.dto.UserDTO;
import br.com.Gabriel.repositories.UserRepository;
import br.com.Gabriel.service.exceptions.ObjectNotFoundException;

class UserServiceImplTest {
	
	
	private static final String PASSWORD = "123";
	private static final String EMAIL = "gabrielfneves2001@gmail.com";
	private static final String NAME = "Gabriel";
	private static final long ID = 1L;
	
	@InjectMocks //CRIAR UMA INSTANCIA REAL
	private UserServiceImpl service;
	@Mock //INSTANCIA DE MENTIRA (MOCK)
	private UserRepository repository;
	@Mock
	private ModelMapper mapper;
	
	private User user;
	private UserDTO userDTO;
	private Optional<User> optionalUser;


	@BeforeEach // FAZER ANTES DE TUDO
	void setUp() throws Exception {
		MockitoAnnotations.openMocks(this); //INICIAR O MOCK DA CLASSE UserServiceImpl
		startUser();
	}

	@Test
	void whenFindByIdThenReturnAnUserInstance() { //findByID
		//QUANDO O FINDBYID FOR CHAMADO COM QUALQUER NUMERO INTEIRO, RETORNE O OPTIOAL USER
		Mockito.when(repository.findById(Mockito.anyLong())).thenReturn(optionalUser);
		
		User response = service.findById(ID);
		
		//Assert. 
		assertNotNull(response); //VERIFICAR SE NÃO É NULO 
		assertEquals(User.class, response.getClass()); //VERIFICAR SE RETORNA UMA USER.CLASS
		assertEquals(ID, response.getId()); //VERIFICAR O id é igual ao passado na constante
		assertEquals(NAME, response.getName()); 
		assertEquals(EMAIL, response.getEmail()); 
		
	}
	
	@Test
	void whenFindByIdThenReturnAnObjectNotFoundException() {
		//QUANDO CHAMAR O FINDBYID                            SOLTE ESSA EXCESSÃO 
		Mockito.when(repository.findById(Mockito.anyLong())).thenThrow(new ObjectNotFoundException("Objeto não encontrado"));
		try {
			service.findById(ID);
		} catch(Exception ex) {
			             //ESPERADO                    //O QUE ACONTECE
			assertEquals(ObjectNotFoundException.class, ex.getClass());
			assertEquals("Objeto não encontrado", ex.getMessage());
			
		}
		
	}

	@Test
	void whenFindAllThenReturnAnListOfUsers() {
		Mockito.when(repository.findAll()).thenReturn(List.of(user));
		
		List<User> response = service.findAll();
		assertNotNull(response); //SE FOR NULO LÇARA UMA EXCESSÃO
		assertEquals(1, response.size());//ASSEGURAR QUE A LISTA É DE APENAS 1
		assertEquals(User.class, response.get(0).getClass());//ASSEGURAR QUE O PRIMEIRO OBJ DO ARRAY É UM OBJ DO TIPO USER
		assertEquals(ID, response.get(0).getId()); //ASSEGURAR QUE O ID DO PRIMEIRO ITEM É IGUAL AO ID PASSADO NA CONSTANTE
		assertEquals(NAME, response.get(1).getName()); 
		assertEquals(EMAIL, response.get(0).getEmail()); 
		assertEquals(PASSWORD, response.get(0).getPassword()); 
		
	}

	@Test
	void testCreate() {
		fail("Not yet implemented");
	}

	@Test
	void testUpdate() {
		fail("Not yet implemented");
	}

	@Test
	void testDelete() {
		fail("Not yet implemented");
	}
	
	//PARA NÃO DAR NULLPOINTEREXCEPTION
	private void startUser() {
		user = new User(ID, NAME, EMAIL, PASSWORD); 
		userDTO = new UserDTO(ID, NAME, EMAIL, PASSWORD); 
		optionalUser = Optional.of(new User(ID, NAME, EMAIL, PASSWORD));
	}
	

}
